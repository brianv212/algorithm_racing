{"version":3,"sources":["components/header.js","components/pages/HomePage/Navigation.js","components/pages/DVHelpers/algorithms.js","components/pages/HomePage/homepage.js","components/pages/goBack.js","components/pages/HashMap/hashmap.js","components/pages/HashMap/hashmap2.js","components/pages/Bucket.js","components/pages/HashMap/hashmapDemo.js","components/pages/HashMap/HashMapDemo2.js","components/pages/StackQueue/StackNode.js","components/pages/StackQueue/Stack.js","components/pages/BubbleSort/BubbleNode.js","components/pages/BubbleSort/BubbleSort.js","components/pages/BubbleSort/DVBubbleSort.js","components/pages/InsertionSort/InsertionSort.js","components/pages/InsertionSort/DVInsertionSort.js","components/pages/MergeSort/MergeSort.js","components/pages/MergeSort/DVMergeSort.js","components/pages/RadixSort/RadixSort.js","components/pages/RadixSort/DVRadixSort.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","Navigation","className","Algorithms","sleep","delay","Promise","resolve","setTimeout","getList","list","then","setNewArr","racer","array","newArr","i","length","push","setArr1","setArr2","map","item","resetArr","newNum","Math","floor","random","includes","setRacer","id","setRacer1","setRacer2","useState","arr1","arr2","racer1","racer2","running","setRunning","bubbleSort","arr","a","len","swapped","tmp","getNum","num","index","strNum","String","foundNum","undefined","radixsort","maxLength","copy","slice","buckets","Array","from","j","shift","copyArr","apply","flat","insertionSort","tempArr","comparisonIndex","temp","handleMerge","finished","newlyAdded","l","li","r","ri","remaining","right","left","mergeSort","middle","leftArr","rightArr","copyleft","resultArray","leftIndex","rightIndex","concat","copyright","startRace","all_algorithms","alert","all_algorithms_string","onClick","disabled","value","key","height","backgroundColor","ceil","Homepage","Back","withRouter","HashMap2","hash","setHash","type","placeholder","max","name","onChange","event","target","pathname","state","h","Bucket","renderedData","data","HMDemo","props","buttonTracker","clicked","bucket","word","hval","charCodeAt","val","buttonCopy","this","setState","getHash","listCopy","location","bucketsRender","handleClick","bind","Component","HashMapDemo2","setBuckets","hashWord","onSubmit","e","preventDefault","newBuckets","newBucket","newHash","console","log","min","StackNode","Stack","StackList","setStackList","mode","setMode","stackRender","node","clone","pop","BubbleNode","BubbleSort","sortList","setSortList","setRemaining","final","setFinal","listRender","leftRender","rightRender","setDisabled","iteration","setIteration","switchCount","first","last","replacement","DVBubbleSort","setArr","red","setRed","checkBlue","original","InsertionSort","DVInsertionSort","MergeSort","mergeList","setMergeList","split1","setSplit1","split2","setSplit2","split3","setSplit3","split4","setSplit4","split5","setSplit5","split6","setSplit6","splitFinal","setFinalSplit","listRender1","listRender2","listRender3","listRender4","listRender5","listRender6","listFinalRender","status","setStatus","list1","list2","x","y","DVMergeSort","RadixSort","checkIndex","DVRadixSort","App","path","exact","component","HashMap","HMDemo2","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.88215cb0.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1><Link style={linkStyle} to=\"/\">Algorithm Racing!</Link></h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '1px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: 'white',\r\n    textDecoration: 'none',\r\n}\r\nexport default Header","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Navigation.css'\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <header className=\"H\">\r\n            <h3 className=\"header\">MORE ABOUT: </h3>\r\n            <h6>\r\n                <ul className=\"links\">\r\n                    <Link className=\"linkstyle\" to=\"BubbleSort\">\r\n                        <li>Bubble Sort</li>\r\n                    </Link>\r\n                    <Link className=\"linkstyle\" to=\"InsertionSort\">\r\n                        <li>Insertion Sort</li>\r\n                    </Link>\r\n                    <Link className=\"linkstyle\" to=\"MergeSort\">\r\n                        <li>Merge Sort</li>\r\n                    </Link>\r\n                    <Link className=\"linkstyle\" to=\"RadixSort\">\r\n                        <li>Radix Sort</li>\r\n                    </Link>\r\n                    <Link className=\"linkstyle\" to=\"HashMap_1\">\r\n                        <li>HashMap</li>\r\n                    </Link>\r\n                    <Link className=\"linkstyle\" to=\"Stack\">\r\n                        <li>Stack/Queue</li>\r\n                    </Link>\r\n                </ul>\r\n            </h6>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React, {useState} from 'react'\nimport '../BubbleSort/DVBubbleSort.css'\nimport '../buttons.css'\nimport './algorithms.css'\n\nfunction Algorithms () {\n    // Functions that stops the entire process for 10 milliseconds\n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve,delay))\n    const getList = list => {\n        return sleep(10).then(0)\n    }\n\n    // Handles the three options to randomize arrays\n    const setNewArr = (racer,array) => {\n        const newArr = []\n        for (let i = 0; i < array.length ; i++){\n            newArr.push(array[i])\n        }\n        // When the user wants to randomize both arrays with the same data\n        if (racer === -1){\n            setArr1(newArr)\n            setArr2(newArr.map(function(item){\n                return item - 1;\n            }))\n        }\n        //Randomize Array 1\n        else if (racer === 1){\n            setArr1(newArr)\n        }\n        //Randomize Array 2\n        else if (racer === 2){\n            setArr2(newArr)\n        }\n    }\n\n    // Ensures that all 64 numbers are distinct\n    const resetArr = () => {\n        const newArr = []\n        for (let i = 0 ; i < 64 ; i++){\n            let newNum = Math.floor(Math.random() * 615) + 20\n            while (newArr.includes(newNum)){\n                newNum = Math.floor(Math.random() * 615) + 20\n            }\n            newArr.push(newNum)\n        }\n        return newArr\n    }\n\n    // Used to identify which function will be ran\n    const setRacer = (id, racer) => {\n        if (id === 1){\n            setRacer1(racer)\n        }\n        if (id === 2){\n            setRacer2(racer)\n        }\n    }\n\n    const [arr1, setArr1] = useState(resetArr)\n    const [arr2, setArr2] = useState(resetArr)\n\n    const [racer1, setRacer1] = useState(-1)\n    const [racer2, setRacer2] = useState(-1)\n\n    const [running,setRunning] = useState(false)\n\n    const bubbleSort = async (racer,arr) => {\n        let a = arr\n        let len = a.length;\n        let swapped;\n\n        do {\n            swapped = false;\n            for (let i = 0; i < len; i++) {\n                if (a[i] > a[i + 1]) {\n                    let tmp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = tmp;\n                    swapped = true;\n                    await sleep(10)\n                    setNewArr(racer,a)\n                }\n            }\n        } while (swapped);\n        setRunning(false)\n    }\n\n    const getNum = (num, index) => {\n        const strNum = String(num);\n        let end = strNum.length - 1;\n        const foundNum = strNum[end - index];\n\n        if (foundNum === undefined){\n            return 0;\n        }\n        return foundNum;\n    };\n\n    const radixsort = async (racer,arr) => {\n        let maxLength = 3;\n        let copy = arr.slice()\n\n        for (let i = 0; i < maxLength; i++) {\n            let buckets = Array.from({ length: 10 }, () => []);\n            for (let j = 0; j < arr.length; j++){\n                let num = getNum(copy[0], i)\n                buckets[num].push(copy[0])\n                copy.shift()\n\n                let copyArr = []\n                copyArr.push.apply(copyArr, buckets.flat())\n                copyArr.push.apply(copyArr, copy)\n                setNewArr(racer,copyArr)\n                await sleep(10)\n            }\n            copy = buckets.flat()\n        }\n        setRunning(false)\n    }\n\n    const insertionSort = async (racer,arr) => {\n        let tempArr = arr\n        for (let i = 1; i < tempArr.length; i++) {\n            for (let comparisonIndex = i; comparisonIndex !== -1; comparisonIndex--) {\n                if (comparisonIndex - 1 !== -1){\n                    if (tempArr[comparisonIndex - 1] > tempArr[comparisonIndex]){\n                        let temp = tempArr[comparisonIndex]\n                        tempArr[comparisonIndex] = tempArr[comparisonIndex-1];\n                        tempArr[comparisonIndex-1] = temp\n                    }\n                    else {\n                        break\n                    }\n                }\n                await sleep(10)\n                setNewArr(racer,tempArr)\n            }\n        }\n        setRunning(false)\n    }\n\n    const handleMerge = (finished,newlyAdded,l,li,r,ri,remaining,right,left,racer) => {\n        let newArr = []\n        if (left !== true){\n            for (let i = 0; i < left.length; i++){\n                newArr.push.apply(newArr,left[i])\n            }\n        }\n\n        for (let i = 0; i < finished.length; i++ ){\n            newArr.push.apply(newArr,finished[i])\n        }\n\n        newArr.push.apply(newArr, newlyAdded)\n        newArr.push.apply(newArr, l.slice(li))\n        newArr.push.apply(newArr, r.slice(ri))\n\n        for (let i = 0; i < remaining.length; i++){\n            newArr.push.apply(newArr,remaining[i])\n        }\n\n        if (right !== true){\n            for (let i = 0; i < right.length; i++){\n                newArr.push.apply(newArr,right[i])\n            }\n        }\n        setNewArr(racer,newArr)\n    }\n\n    const mergeSort = async (racer,arr) => {\n        const middle = Math.floor(arr.length / 2);\n\n        let leftArr = []\n        for (let i = 0; i < middle; i ++){\n            leftArr.push([arr[i]])\n        }\n        let rightArr = []\n        for (let i = middle; i < arr.length; i++){\n            rightArr.push([arr[i]])\n        }\n        let running = true\n        while (running === true){\n            let copyleft = []\n            while (leftArr.length !== 0){\n                let left = leftArr[0]\n                let right = leftArr[1]\n                leftArr.shift()\n                leftArr.shift()\n                let resultArray = []\n                let leftIndex = 0\n                let rightIndex = 0\n\n                while (leftIndex < left.length && rightIndex < right.length) {\n                    if (left[leftIndex] < right[rightIndex]) {\n                        resultArray.push(left[leftIndex]);\n                        leftIndex++;\n                    } \n                    else {\n                        resultArray.push(right[rightIndex]);\n                        rightIndex++;\n                    }\n                    await getList(resultArray)\n                    handleMerge(copyleft,resultArray,left,leftIndex,right,rightIndex,leftArr,rightArr,true,racer)\n                }\n                resultArray = resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))\n                copyleft.push(resultArray)             \n            }\n\n            let copyright = []\n            while (rightArr.length !== 0){\n                let left = rightArr[0]\n                let right = rightArr[1]\n                rightArr.shift()\n                rightArr.shift()\n                let resultArray = []\n                let leftIndex = 0\n                let rightIndex = 0\n\n                while (leftIndex < left.length && rightIndex < right.length) {\n                    if (left[leftIndex] < right[rightIndex]) {\n                        resultArray.push(left[leftIndex]);\n                        leftIndex++;\n                    } \n                    else {\n                        resultArray.push(right[rightIndex]);\n                        rightIndex++;\n                    }\n                    await getList(resultArray)\n                    handleMerge(copyright,resultArray,left,leftIndex,right,rightIndex,rightArr,true,copyleft,racer)\n                }\n                resultArray = resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))\n                copyright.push(resultArray)\n            }\n\n            leftArr = copyleft\n            rightArr = copyright\n\n            // Assumes rightArr.length === 1 as well\n            if (leftArr.length === 1){\n                if (rightArr.length === 0){\n                    running = false\n                }\n                else {\n                    leftArr.push(rightArr[0])\n                    rightArr = []\n                }\n                \n            }\n        }\n        setRunning(false)\n    }\n\n    const startRace = async () => {\n        if (racer1 > -1 && racer2 > -1){\n            setRunning(true)\n            all_algorithms[racer1](1,arr1)\n            all_algorithms[racer2](2,arr2)\n        }\n        else{\n            alert(\"Please choose two racers!\")\n        }\n    }\n\n    const all_algorithms = [bubbleSort, radixsort, insertionSort, mergeSort]\n    const all_algorithms_string = [\"Bubble Sort\", \"Radix Sort\", \"Insertion Sort\", \"Merge Sort\"]\n\n\n\n    return (\n        <div>\n            <div className=\"buttons\">\n                <button onClick={startRace}\n                        className=\"b\"\n                        disabled={running}>Start Race</button>\n                <button onClick={() => setNewArr(1,resetArr())}\n                        className=\"b\"\n                        disabled={running}>Randomize Array 1</button>\n                <button onClick={() => setNewArr(2,resetArr())}\n                        className=\"b\"\n                        disabled={running}>Randomize Array 2</button>\n                <button onClick={() => setNewArr(-1,resetArr())}\n                        className=\"b\"\n                        disabled={running}>Set Same Array</button>                 \n            </div>\n\n\n            <div className=\"racer_selection\">\n                <div className=\"buttons_left\">\n                    <h5>Racer 1: {all_algorithms_string[racer1]}</h5>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(1,0)}\n                                className=\"b\"\n                                disabled={racer1===0}>Bubble Sort</button>\n                    </div>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(1,1)}\n                                className=\"b\"\n                                disabled={racer1===1}>Radix Sort</button>\n                    </div>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(1,2)}\n                                className=\"b\"\n                                disabled={racer1===2}>Insertion Sort</button>\n                    </div>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(1,3)}\n                                className=\"b\"\n                                disabled={racer1===3}>Merge Sort</button>\n                    </div>\n                </div>\n\n\n                <div className=\"buttons_left\">\n                    <h5>Racer 2: {all_algorithms_string[racer2]}</h5>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(2,0)}\n                                className=\"b\"\n                                disabled={racer2===0}>Bubble Sort</button>\n                    </div>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(2,1)}\n                                className=\"b\"\n                                disabled={racer2===1}>Radix Sort</button>\n                    </div>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(2,2)}\n                                className=\"b\"\n                                disabled={racer2===2}>Insertion Sort</button>\n                    </div>\n                    <div className=\"racers\">\n                        <button onClick={() => setRacer(2,3)}\n                                className=\"b\"\n                                disabled={racer2===3}>Merge Sort</button>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"array-container\">\n                {arr1.map((value,index) => (\n                    <div\n                        key={index}\n                        className=\"array\" \n                        style={{height: `${value}px`, backgroundColor: `rgb(${65 + Math.ceil(value/8.038)},0,${115 + Math.ceil(value/4.535)})`}}>\n                    </div>\n                ))}\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {arr2.map((value,index) => (\n                    <div\n                        key={index}\n                        className=\"array\" \n                        style={{height: `${value}px`, backgroundColor: `rgb(${65 + Math.ceil(value/8.038)},0,${115 + Math.ceil(value/4.535)})`}}>\n                    </div>\n                ))}\n            </div>\n        </div>       \n    )\n}\n\nexport default Algorithms","import React from 'react'\r\nimport Navigation from './Navigation'\r\nimport '../BubbleSort/DVBubbleSort.css'\r\nimport Algorithms from '../DVHelpers/algorithms'\r\n\r\nfunction Homepage() {\r\n    return (\r\n        <div>\r\n            <Navigation />\r\n            <div>\r\n                <Algorithms />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './goBack.css'\n\nfunction Back() {\n    return (\n        <div className='container-fluid'>\n            <nav>\n                <Link className='navStyle' to=\"/\">\n                    <p className=\"text\">Back to Home</p>\n                </Link>\n            </nav>\n        </div>\n    )\n}\n\nexport default Back ","import React from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport Back from '../goBack'\r\nimport './hashmap.css'\r\n\r\nfunction HashMap() {\r\n    return (\r\n        <div className=\"Hash\">\r\n            <div className=\"top-bar\">\r\n                <Back />\r\n                <Link to=\"/HashDemo2\" className=\"gettingStarted\">Visualize it!</Link>                \r\n            </div>\r\n\r\n            <h1 className=\"title\"><b>HASHMAP</b></h1>\r\n\r\n            <div className=\"info\">\r\n                <div className=\"what-is-it\">\r\n                    <h5 className=\"subt-what-is-it\"><b className=\"test\">WHAT IS IT?</b></h5>\r\n                    <ul>\r\n                        <li>Speeds up search time by cutting costs from O(N) to O(log(N))</li>\r\n                        <li>Uses Hashvalues as a way of finding values</li>\r\n                        <li>Stores data in (key,value) pairs</li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"hash-value\">\r\n                    <h5 className=\"subt-hash-value\"><b>WHAT IS A HASHVALUE?</b></h5>\r\n                    <ul>\r\n                        <li>It's a unique value (usually prime) that evenly distributes data</li>\r\n                        <li>Used in calculating which BUCKET a piece of data is assigned to</li>\r\n                        <li>Typically 5-digits long</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"example\">\r\n                    <div>\r\n                        <h5>\r\n                            <b>Example: How do we calculate the bucket for 'cat' \r\n                                given 10 TOTAL BUCKETS and a HASHVALUE of 91283?</b>\r\n                        </h5>\r\n                    </div>\r\n                    <ul className=\"cat-example\">\r\n                        <li>(Every character has a numerical value accessible by the 'ord' command)</li>\r\n                            <ul>ord('c'): 99 * 91283 =  9,037,017</ul>\r\n                            <ul>ord('a'): 97 * 91283 = 8,854,451</ul>\r\n                            <ul>ord('t'): 116 * 91283 = 10,588,828</ul>\r\n                        <li>And finally: 28,480,296 % 10 (buckets) = 6, the bucket 'cat' is added to</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(HashMap)\r\n","import React, { useState } from 'react'\nimport { Link} from 'react-router-dom'\nimport Back from '../goBack'\nimport './hashmap.css'\n\nfunction HashMap2 () {\n    const [hash, setHash] = useState(42443)\n    return (\n        <div>\n            <Back />\n            <div className=\"options\">\n                \n                <div className=\"option-one\">\n                    <h5>Link 1: Demonstrates how different hash values make data organization unique</h5>\n                    <div>\n                        <div className=\"form\">\n                            <form>\n                                <p>\n                                    <input\n                                        type=\"number\"\n                                        placeholder=\"42443\"\n                                        max={999999}\n                                        name=\"hashValue\"\n                                        onChange={(event) =>\n                                            setHash(event.target.value)\n                                        }\n                                    />\n                                </p>\n                            </form>\n                            &nbsp;&nbsp;&nbsp;<h5>Current Hash: {hash}</h5>\n                        </div>\n                        <Link\n                            className=\"submit\"\n                            to={{\n                                pathname: '/HashDemo',\n                                state: {\n                                    h: hash,\n                                },\n                            }}>\n                            <p className=\"click-one\">Start HashMap Demo 1</p>\n                        </Link>\n                    </div>\n                </div>\n                \n                <div className=\"option-two\">\n                    <h5>Link 2: Visualizes how data is organized evenly between buckets</h5>\n                    <Link\n                        className=\"submit\"\n                        to={{\n                            pathname: '/HashDemo2'\n                        }}>\n                        <p>Start HashMap Demo 2</p>\n                    </Link>\n                </div>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default HashMap2","import React from 'react'\r\nimport './Bucket.css'\r\n\r\n\r\n// Not in any particular folder because it's used by many algorithms\r\nconst Bucket = ({ id, data }) => {\r\n    const renderedData = data.map((item) => <h3> {`${item}`} </h3>)\r\n    return (\r\n        <div className=\"Bucket\">\r\n            <h2>{id}</h2>\r\n            {renderedData}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bucket","import React, { Component } from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport './hashmapDemo.css'\r\nimport Bucket from '../Bucket'\r\nimport Back from '../goBack'\r\n\r\nclass HMDemo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            buttonTracker: [\r\n                { clicked: false },{ clicked: false },{ clicked: false },\r\n                { clicked: false },{ clicked: false },{ clicked: false },{ clicked: false },\r\n                { clicked: false },{ clicked: false },{ clicked: false },{ clicked: false }],\r\n            list: [\r\n                { bucket: 0, data: [] },{ bucket: 1, data: [] },{ bucket: 2, data: [] },\r\n                { bucket: 3, data: [] },{ bucket: 4, data: [] },{ bucket: 5, data: [] },{ bucket: 6, data: [] },\r\n                { bucket: 7, data: [] },{ bucket: 8, data: [] },{ bucket: 9, data: [] },\r\n            ]\r\n        }\r\n    }\r\n\r\n    getHash(word,hval) {\r\n        let hash = 0\r\n        for (let i = 0; i < word.length; i++) {\r\n            hash += hval * word.charCodeAt(i)\r\n        }\r\n        hash = hash % 10\r\n        return hash\r\n    }\r\n\r\n    handleClick(val,word,hval) {\r\n        let buttonCopy = this.state.buttonTracker\r\n        if (buttonCopy[val].clicked === false) {\r\n            buttonCopy[val].clicked = true //Address warning 'setState'. Find better option?\r\n            this.setState({buttonTracker: buttonCopy})\r\n        }\r\n\r\n        let hash = this.getHash(word,hval)\r\n\r\n        let listCopy = this.state.list\r\n        listCopy[hash].data.push(word)\r\n        this.setState({list: listCopy})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { h } = this.props.location.state\r\n        const bucketsRender = this.state.list.map((bucket,index) => (\r\n            <Bucket id={bucket.bucket} data={bucket.data} key={index} />\r\n        ))\r\n\r\n        return (\r\n            <div>\r\n                <Back />\r\n                <p>Hash Value: {h}</p>\r\n                <div className=\"HMDemo\">\r\n                    <div className=\"buttons\">\r\n                        <button\r\n                            onClick={this.handleClick.bind(this, 0, 'computer', h)}\r\n                            disabled={this.state.buttonTracker[0].clicked}>\r\n                            COMPUTER\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 1, 'data', h)}\r\n                            disabled={this.state.buttonTracker[1].clicked}>\r\n                            DATA\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 2, 'science', h)}\r\n                            disabled={this.state.buttonTracker[2].clicked}>\r\n                            SCIENCE\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 3, 'peter', h)}\r\n                            disabled={this.state.buttonTracker[3].clicked}>\r\n                            PETER\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 4, 'anteater', h)}\r\n                            disabled={this.state.buttonTracker[4].clicked}>\r\n                            ANTEATER\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 5, 'school', h)}\r\n                            disabled={this.state.buttonTracker[5].clicked}>\r\n                            SCHOOL\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 6, 'bren', h)}\r\n                            disabled={this.state.buttonTracker[6].clicked}>\r\n                            BREN\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 7, 'zot', h)}\r\n                            disabled={this.state.buttonTracker[7].clicked}>\r\n                            ZOT\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 8, 'irvine', h)}\r\n                            disabled={this.state.buttonTracker[8].clicked}>\r\n                            IRVINE\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 9, 'visual', h)}\r\n                            disabled={this.state.buttonTracker[9].clicked}>\r\n                            VISUAL\r\n                        </button>\r\n                        <button onClick={this.handleClick.bind(this, 10, 'hashmap', h)}\r\n                            disabled={this.state.buttonTracker[10].clicked}>\r\n                            HASHMAP\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {bucketsRender}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(HMDemo)\r\n","import React, { useState } from 'react'\r\nimport Bucket from '../Bucket'\r\nimport './HashMapDemo2.css'\r\n\r\nconst HashMapDemo2 = () => {\r\n    const [buckets, setBuckets] = useState([\r\n        { id: 0, data: [] },\r\n        { id: 1, data: [] },\r\n        { id: 2, data: [] },\r\n        { id: 3, data: [] },\r\n        { id: 4, data: [] },\r\n        { id: 5, data: [] },\r\n        { id: 6, data: [] },\r\n        { id: 7, data: [] },\r\n        { id: 8, data: [] },\r\n        { id: 9, data: [] },\r\n    ])\r\n\r\n    const [hash, setHash] = useState(42443)\r\n\r\n    const handleHash = (e) => {\r\n        e.preventDefault()\r\n        const newHash = e.target[0].value\r\n        console.log(newHash)\r\n        if (newHash === \"\"){\r\n            console.log(\"lol\")\r\n            setHash(hash)\r\n        }\r\n        else {\r\n            setHash(newHash)\r\n        }\r\n\r\n        let newBuckets = [...buckets]\r\n        for (let i = 0 ; i < buckets.length ; i++ ){\r\n            let newBucket = { ...buckets[i] }\r\n            newBucket.data = []\r\n            newBuckets[i] = newBucket\r\n        }\r\n        setBuckets(newBuckets)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const word = e.target[0].value\r\n        let newBuckets = [...buckets]\r\n        let index = hashWord(word)\r\n        let newBucket = { ...buckets[index] }\r\n        newBucket.data.push(word)\r\n        newBuckets[index] = newBucket\r\n        setBuckets(newBuckets)\r\n    }\r\n    \r\n    const hashWord = (word) => {\r\n        let hval = 0\r\n        for (let i = 0; i < word.length; i++) {\r\n            hval += hash * word.charCodeAt(i)\r\n        }\r\n        return hval % 10\r\n    }\r\n\r\n    const bucketsRender = buckets.map((bucket) => (\r\n        <Bucket id={bucket.id} data={bucket.data} />\r\n    ))\r\n\r\n    return (\r\n        <div className=\"HashMapDemo\">\r\n            <h1 className=\"title\"> HASH MAP DEMO </h1>\r\n            <h3 className=\"title\">Current Hash: {hash}</h3>\r\n            <div className=\"forms\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <input name=\"word\" type=\"text\" placeholder=\"Text\" />\r\n                    <button>Submit</button>\r\n                </form>\r\n                <form onSubmit={handleHash}>\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder={hash}\r\n                        max={999999}\r\n                        min={1}\r\n                        name=\"hashValue\"\r\n                    />\r\n                    <button>Change Hash!</button>\r\n                </form>\r\n            </div>\r\n            {/* <button onClick={handleHash}>Submit</button> */}\r\n            {bucketsRender}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HashMapDemo2\r\n","import React from 'react'\r\nimport './StackNode.css'\r\n\r\nconst StackNode = ({ value }) => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"StackNode\"> {value} </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StackNode","import React, { useState } from 'react'\r\nimport StackNode from './StackNode'\r\nimport './Stack.css'\r\nimport '../buttons.css'\r\nimport Back from '../goBack'\r\n\r\nconst Stack = () => {\r\n    const [StackList, setStackList] = useState([])\r\n    const [mode, setMode] = useState(\"Stack\")\r\n    const stackRender = StackList.map((node) => <StackNode value={node} />)\r\n\r\n    const handlePush = (e) => {\r\n        e.preventDefault()\r\n        if (e.target[0].value === \"\")\r\n        {\r\n            alert(\"Please enter a value first!\")\r\n        }\r\n        else if (StackList.length === 10)\r\n        {\r\n            alert(\"Max 10 items only. Pop some!\")\r\n        }\r\n        else{\r\n            console.log(e.target[0])\r\n            setStackList([e.target[0].value, ...StackList])\r\n            e.target[0].value = ''\r\n        }\r\n    }\r\n\r\n    const handlePop = (e) => {\r\n        e.preventDefault()\r\n        const clone = StackList.slice()\r\n        if (mode === \"Stack\"){\r\n            clone.shift()\r\n        }\r\n        else {\r\n            clone.pop()\r\n        }\r\n        console.log(clone)\r\n        setStackList(clone)\r\n    }\r\n\r\n    const handleMode = (e) => {\r\n        e.preventDefault()\r\n        if (mode === \"Stack\"){\r\n            setMode(\"Queue\")\r\n        }\r\n        else {\r\n            setMode(\"Stack\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Back />\r\n                <h1 className=\"sq_title\">STACK / QUEUE</h1>\r\n            </div>\r\n            <h5 className=\"descriptionTitle\"><b>WHAT IS IT?</b></h5>\r\n            <div className=\"description\">\r\n                <ul>\r\n                    <li>Data structures which ensures the processing of data elements in some order.</li>\r\n                    <li>Stacks follow the LIFO Principle while Queues follow the FIFO Principle.</li>\r\n                    <li>Which one to use depends solely on what logically works best.</li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"Stack\">\r\n                <div className=\"push_pop\">\r\n                    <form onSubmit={handlePush}>\r\n                        <input\r\n                            name=\"nodeValue\"\r\n                            type=\"number\"\r\n                            max={99999}\r\n                            placeholder=\"Add a value!\"\r\n                        />\r\n                        <button className=\"b\">PUSH</button>\r\n                    </form>\r\n                    <button className=\"b\" onClick={handlePop}><b>POP!</b></button>\r\n                </div>\r\n\r\n                <div className=\"change_mode\">\r\n                    <h1>Current Mode: {mode}</h1>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <button className=\"b\" onClick={handleMode}>CHANGE MODE</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"stackList\">{stackRender}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stack","import React from 'react'\nimport './BubbleNode.css'\n\n\n// Function that makes each node in large font with a border around it\nconst BubbleNode = ({ value }) => {\n    return (\n        <div>\n            <h1 className=\"BubbleNode\"> {value} </h1>\n        </div>\n    )\n}\n\nexport default BubbleNode ","import React, { useState } from 'react'\nimport {Link} from 'react-router-dom'\nimport Back from '../goBack'\nimport BubbleNode from './BubbleNode'\nimport './BubbleSort.css'\nimport '../buttons.css'\n\n\nfunction BubbleSort() {\n\n    // sortList is the initial state of the list, changes frequently\n    const [sortList, setSortList] = useState([6,9,3,7,2,1,3,7,0])\n    const [remaining, setRemaining] = useState(sortList)\n    const [final, setFinal] = useState([])\n\n    // Left and Right Render done purely for visuals. The finished part of the list (right)\n    // Will be colored green while the unfinished (left) part will be seen in red\n    const listRender = sortList.map((node) => <BubbleNode value={node} />)\n    const leftRender = remaining.map((node) => <BubbleNode value={node}/>)\n    const rightRender = final.map((node) => <BubbleNode value={node}/>)\n\n    const [disabled, setDisabled] = useState(false)\n    const [iteration, setIteration] = useState(0)\n\n    // Basically restarts the demonstration with new data.\n    const setRandom = (e) => {\n        e.preventDefault()\n        let replacement = []\n        for (let i = 0; i < 10; i++){\n            replacement.push(Math.floor(Math.random() * 100))\n        }\n        setSortList(replacement)\n\n        setRemaining(replacement)\n        setFinal([])\n\n        setDisabled(false)\n        setIteration(0)\n    }\n\n\n    const handleSort = (e) => {\n        e.preventDefault()\n        const clone = sortList\n        let len = listRender.length;\n\n\n        // While we still haven't reached O(n^2), continue the sorting algorithm.\n        if (iteration < len){\n            let switchCount = 0\n            for (var j = 0; j < len; j++){\n                if (clone[j] > clone[j+1]){\n                    let tmp = clone[j];\n                    clone[j] = clone[j + 1];\n                    clone[j + 1] = tmp;\n                    switchCount = switchCount + 1\n                }\n            }\n            // Sets the original to the clone for future iterations\n            // Sets the iteration count up by 1 each time\n            setIteration(iteration + 1)\n            setSortList(clone)\n\n            if (switchCount === 0){\n                setDisabled(true)\n                setRemaining([])\n                setFinal(clone)\n            }\n            else{\n                let first = clone.slice(0,len-(iteration+1))\n                setRemaining(first)\n\n                let last = clone.slice(len-(iteration+1), len)\n                setFinal(last)          \n            }\n        }\n        // Else if the whole list has been sorted, it's done running. Set disabled and\n        // Prevent the user from pressing the button.\n        else{\n            setDisabled(true)\n        }\n    } \n\n    return(\n        <div>\n            <div className=\"top-bar\">\n                <Back />\n                <Link to=\"DVBubbleSort\" className=\"link\">Visualize it</Link>\n            </div>\n            <h1 className=\"bubble_sort\">BUBBLE SORT</h1>\n            <h5 className=\"descriptionTitle\"><b>WHAT IS IT?</b></h5>\n\n            <div className=\"description\">\n                <ul className=\"d\">\n                    <li>Probably the least favorable sorting algorithm to use in practice.</li>\n                    <li>Sorts in O(n^2) time. But still can be used for smaller data sets.</li>\n                    <li>Can sort as fast as O(n) time, but very rarely unless the data is already mostly sorted.</li>\n                </ul>\n            </div>\n            <div className=\"bubbleList\">\n                <h2 className=\"left\">{leftRender}</h2>\n                <h2 className=\"right\">{rightRender}</h2>\n            </div>\n            <div className=\"center\">\n                <button onClick={handleSort} disabled={disabled} className=\"b\"><b>Press Me!</b></button>\n                <button onClick={setRandom} className=\"b\">Randomize!</button>\n            </div>\n        </div>\n    )\n}\n\n\nexport default BubbleSort","import React, {useState} from 'react'\nimport './DVBubbleSort.css'\n\nfunction DVBubbleSort () {\n    const resetArr = () => {\n        const newArr = []\n        for (let i = 0 ; i < 50 ; i++){\n            let newNum = Math.floor(Math.random() * 615) + 20\n            while (newArr.includes(newNum)){\n                newNum = Math.floor(Math.random() * 615) + 20\n            }\n            newArr.push(newNum)\n        }\n        return newArr\n    }\n\n    const setNewArr = (array) => {\n        const newArr = []\n        for (let i = 0; i < 50 ; i++){\n            newArr.push(array[i])\n        }\n        setArr(newArr)\n    }\n    \n    const [arr,setArr] = useState(resetArr())\n    const [running,setRunning] = useState(false)\n\n    // Below handles whether the node of interest should be red or not\n    const [red, setRed] = useState(0)\n    const checkRed = (val) => {\n        if (val === red){\n            return 250\n        }\n        return 65 + Math.ceil(val/8.038)\n    }\n    const checkBlue = (val) => {\n        if (val === red){\n            return 0\n        }\n        return 115 + Math.ceil(val/4.535) \n    }\n\n    // When sleep is called, nothing will happen for n milliseconds. This gives time to actually\n    // show the changes happening\n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve,delay))\n\n    // Handles all the logic behind bubble sorting\n    const bubbleSort = async (e) => {\n        e.preventDefault()\n        setRunning(true)\n        let a = arr\n        let len = a.length;\n        let swapped;\n\n        do {\n            swapped = false;\n            for (let i = 0; i < len; i++) {\n                let original = a[i]\n                if (a[i] > a[i + 1]) {\n                    let tmp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = tmp;\n                    setRed(tmp)\n                    swapped = true;\n                    await sleep(30)\n                    setNewArr(a)\n                }\n                setRed(original)\n                setNewArr(a)\n            }\n        } while (swapped);\n\n        setRed(0)\n        setNewArr(a)\n        setRunning(false)\n    }\n\n    return (\n        <div>\n            <div className=\"buttons\">\n                <button onClick={bubbleSort}\n                        className=\"b\"\n                        disabled={running}>Click Me!</button>\n                <button onClick={() => setNewArr(resetArr())}\n                        className=\"b\"\n                        disabled={running}>Randomize</button>\n            </div>\n            <div className=\"array-container\">\n                {arr.map((value,index) => (\n                    <div\n                        key={index}\n                        className=\"array\" \n                        style={{height: `${value}px`, backgroundColor: `rgb(${checkRed(value)},0,${checkBlue(value)})`}}>\n                    </div>\n                ))}\n            </div>\n        </div>       \n    )\n}\n\nexport default DVBubbleSort","import React, {useState} from 'react'\nimport Back from \"../goBack\"\nimport {Link} from \"react-router-dom\"\nimport './InsertionSort.css'\nimport '../buttons.css'\n\n\nfunction InsertionSort () {\n    const checkIndex = (i) => {\n        if (i <= iteration - 1) {\n            return \"green\"\n        }\n        return \"red\"\n    }\n\n    const randomize = () => {\n        let newArr = []\n        for (let i = 0 ; i < 10 ; i++){\n            let newNum = Math.floor(Math.random() * 999)\n            newArr.push(newNum)\n        }\n        setArr([...newArr])\n        setIteration(0)\n    }\n\n    const insertionSort = () => {\n        let tempArr = arr\n        let i = iteration\n\n        if (i <= tempArr.length - 1){\n            for (let comparisonIndex = i; comparisonIndex !== -1; comparisonIndex--) {\n                if (comparisonIndex - 1 !== -1){\n                    if (tempArr[comparisonIndex - 1] > tempArr[comparisonIndex]){\n                        let temp = tempArr[comparisonIndex]\n                        tempArr[comparisonIndex] = tempArr[comparisonIndex-1];\n                        tempArr[comparisonIndex-1] = temp\n                    }\n                }    \n            }\n            setArr([...tempArr])\n        }\n        setIteration(iteration => iteration + 1)\n    }\n\n    const [arr,setArr] = useState([4,8,3,7,1,6,2,0,5,9])\n    const [iteration,setIteration] = useState(0)\n\n    return (\n        <div>\n            <div className=\"top-bar\">\n                <Back />\n                <Link to=\"DVInsertionSort\" className=\"link\">Visualize It!</Link>\n            </div>\n            <h1 style={{textAlign: \"center\"}}>INSERTION SORT</h1>\n            <h5 style={{textAlign: \"center\"}}><b>WHAT IS IT?</b></h5>\n            <div className=\"description\">\n                <ul>\n                    <li>Sorts in O(n^2) time, which is on par with Bubble Sort.</li>\n                    <li>Similar to Bubble Sort. Think of it as sorting starting from the left.</li>    \n                    <li>Inserts from left to right by taking the left-most unsorted node and reinserting at the right spot.</li>\n                </ul>\n            </div>\n\n            <div className=\"buttons\">\n                <button onClick={insertionSort} className=\"b\" disabled={iteration === arr.length}>Press Me!</button>\n                <button onClick={randomize}>Randomize!</button>\n            </div>\n\n            <div className=\"listRender\">\n                {arr.map((value, index) => (\n                    <h1 className=\"InsertionNode\">\n                        <div className={`list${checkIndex(index)}`}>{value}</div>\n                    </h1>\n                ))}\n\n            </div>\n        </div>\n    )\n}\n\n\nexport default InsertionSort","import React, {useState} from 'react'\nimport '../InsertionSort/DVInsertionSort.css'\nimport '../buttons.css'\n\n\nfunction DVInsertionSort () {\n    const setNewArr = (array) => {\n        const newArr = []\n        for (let i = 0; i < 50 ; i++){\n            newArr.push(array[i])\n        }\n        setArr(newArr)\n    }\n\n    const resetArr = () => {\n        const newArr = []\n        for (let i = 0 ; i < 50 ; i++){\n            let newNum = Math.floor(Math.random() * 615) + 20\n            while (newArr.includes(newNum)){\n                newNum = Math.floor(Math.random() * 615) + 20\n            }\n            newArr.push(newNum)\n        }\n        return newArr\n    }\n\n    const [arr, setArr] = useState(resetArr)\n    const [running, setRunning] = useState(false)\n\n    const [red, setRed] = useState(0)\n    const checkRed = (val) => {\n        if (val === red){\n            return 250\n        }\n        return 65 + Math.ceil(val/8.038)\n    }\n    const checkBlue = (val) => {\n        if (val === red){\n            return 0\n        }\n        return 115 + Math.ceil(val/4.535) \n    }\n\n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve,delay))\n\n    const insertionSort = async () => {\n        setRunning(true)\n\n        let tempArr = arr\n        for (let i = 1; i < tempArr.length; i++) {\n            setRed(tempArr[i])\n            for (let comparisonIndex = i; comparisonIndex !== -1; comparisonIndex--) {\n                if (comparisonIndex - 1 !== -1){\n                    if (tempArr[comparisonIndex - 1] > tempArr[comparisonIndex]){\n                        let temp = tempArr[comparisonIndex]\n                        tempArr[comparisonIndex] = tempArr[comparisonIndex-1];\n                        tempArr[comparisonIndex-1] = temp\n                    }\n                    else {\n                        break\n                    }\n                }\n                await sleep(50)\n                setNewArr(tempArr)\n            }\n        }\n        setRed(0)\n        setRunning(false)\n    }\n\n    return (\n        <div>\n            <div className=\"buttons\">\n                <button onClick={insertionSort}\n                        className=\"b\"\n                        disabled={running}>Click Me!</button>\n                <button onClick={() => setNewArr(resetArr())}\n                        className=\"b\"\n                        disabled={running}>Randomize</button>\n            </div>\n            <div className=\"array-container\">\n                {arr.map((value,index) => (\n                    <div\n                        key={index}\n                        className=\"array\" \n                        style={{height: `${value}px`, backgroundColor: `rgb(${checkRed(value)},0,${checkBlue(value)})`}}>\n                    </div>\n                ))}\n            </div>\n        </div>  \n    )\n}\n\nexport default DVInsertionSort","import React, {useState} from 'react'\nimport Back from '../goBack'\nimport StackNode from '../StackQueue/StackNode'\nimport {Link} from 'react-router-dom'\nimport './MergeSort.css'\n\nfunction MergeSort() {\n    const [mergeList, setMergeList] = useState([[4],[3],[2],[1],[8],[7],[6],[5]])\n    const [split1, setSplit1] = useState([])\n    const [split2, setSplit2] = useState([])\n    const [split3, setSplit3] = useState([])\n    const [split4, setSplit4] = useState([])\n    const [split5, setSplit5] = useState([])\n    const [split6, setSplit6] = useState([])\n    const [splitFinal, setFinalSplit] = useState([])\n\n    const listRender = mergeList.map((node) => <StackNode value={node}/>)\n    const listRender1 = split1.map((node) => <StackNode value={node}/>)\n    const listRender2 = split2.map((node) => <StackNode value={node}/>)\n    const listRender3 = split3.map((node) => <StackNode value={node}/>)\n    const listRender4 = split4.map((node) => <StackNode value={node}/>)\n    const listRender5 = split5.map((node) => <StackNode value={node}/>)\n    const listRender6 = split6.map((node) => <StackNode value={node}/>)\n    const listFinalRender = splitFinal.map((node) => <StackNode value={node}/>)\n\n    const [status, setStatus] = useState(0)\n    const [disabled, setDisabled] = useState(false)\n\n    // Handles the merge between two lists, making sure that the data is organized in the process\n    const handleMerge = (list1,list2) => {\n        let resultArray = [];\n        let leftIndex = 0;\n        let rightIndex = 0;\n\n        // While one of the arrays haven't been fully traversed through...\n        while (leftIndex < list1.length && rightIndex < list2.length) {\n            if (list1[leftIndex] <= list2[rightIndex]) {\n                resultArray.push(list1[leftIndex]);\n                leftIndex++;\n            } else {\n                resultArray.push(list2[rightIndex]);\n                rightIndex++;\n            }\n        }\n\n        // Retrieve the 'leftovers', the data that weren't collected in the while loop\n        if (leftIndex < list1.length){\n            for (var x = leftIndex; x < list1.length; x++){\n                resultArray.push(list1[x])\n            }\n        }\n        else if (rightIndex < list2.length){\n            for (var y = rightIndex; y < list2.length; y++){\n                resultArray.push(list2[y])\n            }      \n        }\n        return(resultArray)\n    }\n\n    // Handles Merge Sort in steps\n    const handleSplit = (e) => {\n        // When the arrays are of size 1\n        if (status === 0){\n            setSplit1(handleMerge(mergeList[0], mergeList[1]))\n            setSplit2(handleMerge(mergeList[2], mergeList[3]))\n            setSplit3(handleMerge(mergeList[4], mergeList[5]))\n            setSplit4(handleMerge(mergeList[6], mergeList[7]))\n\n            setStatus(1)\n        }\n        else if(status === 1){\n            setSplit5(handleMerge(split1,split2))\n            setSplit6(handleMerge(split3,split4))\n            setStatus(2)\n        }\n\n        else if(status === 2){\n            setFinalSplit(handleMerge(split5,split6))\n            setStatus(3)\n            setDisabled(true)\n        }\n    }\n\n    // Resets the whole demonstration with new numbers\n    const handleRandom = (e) => {\n        e.preventDefault()\n        setMergeList([[Math.floor(Math.random() * 100)],[Math.floor(Math.random() * 100)],\n                      [Math.floor(Math.random() * 100)],[Math.floor(Math.random() * 100)],\n                      [Math.floor(Math.random() * 100)],[Math.floor(Math.random() * 100)],\n                      [Math.floor(Math.random() * 100)],[Math.floor(Math.random() * 100)]])\n        setSplit1([])\n        setSplit2([])\n        setSplit3([])\n        setSplit4([])\n        setSplit5([])\n        setSplit6([])\n        setFinalSplit([])\n        setStatus(0)\n        setDisabled(false)\n    }\n\n    return (\n        <div>\n            <div className=\"top-bar\">\n                <Back />\n                <Link to=\"DVMergeSort\" className=\"link\">Visualize it</Link>\n            </div>\n            <h1 className=\"merge_title\">MERGE SORT</h1>\n            <h5 className=\"descriptionTitle\"><b>WHAT IS IT?</b></h5>\n            <div className=\"description\">\n                <ul className=\"d\">\n                    <li>Divide and conquer algorithm that recusively sorts sublists of the whole list.</li>\n                    <li>Sorts in O(n log(n) time, which is more favorable than other algorithms.</li>\n                    <li>Like the example below, when all sublists are of size one is when we start the sort.</li>\n                </ul>\n            </div>\n            <h2 className=\"buttons\">\n                <button onClick={handleSplit} disabled={disabled} className=\"bt\"><b>Press Me!</b></button>\n                <button onClick={handleRandom} className=\"bt\">Randomize!</button>          \n            </h2>\n            <h2 className=\"step-1\">{listRender}</h2>\n\n            <h2 className=\"step-2\">\n                <p className=\"together\">{listRender1}</p>\n                <p className=\"together\">{listRender2}</p>\n                <p className=\"together\">{listRender3}</p>\n                <p className=\"together\">{listRender4}</p>\n            </h2>\n\n            <h2 className=\"step-3\">\n                <p className=\"together\">{listRender5}</p>\n                <p className=\"together\">{listRender6}</p>      \n            </h2>\n\n            <h2 className=\"results\">\n                <p className=\"together\">{listFinalRender}</p>\n            </h2>\n        </div>\n    )\n}\n\nexport default MergeSort ","import React, {useState} from 'react';\nimport '../BubbleSort/DVBubbleSort.css';\n\nfunction DVMergeSort () {\n    const resetArr = () => {\n        const newArr = []\n        for (let i = 0 ; i < 64 ; i++){\n            let newNum = Math.floor(Math.random() * 615) + 20\n            while (newArr.includes(newNum)){\n                newNum = Math.floor(Math.random() * 615) + 20\n            }\n            newArr.push(newNum)\n        }\n        return newArr\n    }\n\n    const setNewArr = () => {\n        let newArr = []\n        for (let i = 0 ; i < 64 ; i++){\n            newArr.push(Math.floor(Math.random() * 615) + 20)\n        }\n        setArr(newArr)\n    }\n    const [arr,setArr] = useState(resetArr())\n\n    const [running, setRunning] = useState(false)\n\n    const [red, setRed] = useState(0)\n    const checkRed = (val) => {\n        if (val === red){\n            return 250\n        }\n        return 65 + Math.ceil(val/8.038)\n    }\n    const checkBlue = (val) => {\n        if (val === red){\n            return 0\n        }\n        return 115 + Math.ceil(val/4.535) \n    }\n\n\n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve,delay))\n    const getList = list => {\n        return sleep(75).then(0)\n    }\n\n    const handleMerge = (finished,newlyAdded,l,li,r,ri,remaining,right,left) => {\n        let newArr = []\n        if (left !== true){\n            for (let i = 0; i < left.length; i++){\n                newArr.push.apply(newArr,left[i])\n            }\n        }\n\n        for (let i = 0; i < finished.length; i++ ){\n            newArr.push.apply(newArr,finished[i])\n        }\n\n        newArr.push.apply(newArr, newlyAdded)\n        newArr.push.apply(newArr, l.slice(li))\n        newArr.push.apply(newArr, r.slice(ri))\n\n        for (let i = 0; i < remaining.length; i++){\n            newArr.push.apply(newArr,remaining[i])\n        }\n\n        if (right !== true){\n            for (let i = 0; i < right.length; i++){\n                newArr.push.apply(newArr,right[i])\n            }\n        }\n        setArr([...newArr])\n    }\n\n    const mergeSort = async () => {\n        setRunning(true)\n        const middle = Math.floor(arr.length / 2);\n\n        let leftArr = []\n        for (let i = 0; i < middle; i ++){\n            leftArr.push([arr[i]])\n        }\n        let rightArr = []\n        for (let i = middle; i < arr.length; i++){\n            rightArr.push([arr[i]])\n        }\n\n        let running = true\n        while (running === true){\n\n            let copyleft = []\n            while (leftArr.length !== 0){\n                let left = leftArr[0]\n                let right = leftArr[1]\n                leftArr.shift()\n                leftArr.shift()\n                let resultArray = []\n                let leftIndex = 0\n                let rightIndex = 0\n\n                while (leftIndex < left.length && rightIndex < right.length) {\n                    if (left[leftIndex] < right[rightIndex]) {\n                        setRed(left[leftIndex])\n                        resultArray.push(left[leftIndex]);\n                        leftIndex++;\n                    } \n                    else {\n                        setRed(right[rightIndex])\n                        resultArray.push(right[rightIndex]);\n                        rightIndex++;\n                    }\n                    await getList(resultArray)\n                    handleMerge(copyleft,resultArray,left,leftIndex,right,rightIndex,leftArr,rightArr,true)\n                }\n                resultArray = resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))\n                copyleft.push(resultArray)             \n            }\n\n            let copyright = []\n            while (rightArr.length !== 0){\n                let left = rightArr[0]\n                let right = rightArr[1]\n                rightArr.shift()\n                rightArr.shift()\n                let resultArray = []\n                let leftIndex = 0\n                let rightIndex = 0\n\n                while (leftIndex < left.length && rightIndex < right.length) {\n                    if (left[leftIndex] < right[rightIndex]) {\n                        setRed(left[leftIndex])\n                        resultArray.push(left[leftIndex]);\n                        leftIndex++;\n                    } \n                    else {\n                        setRed(right[rightIndex])\n                        resultArray.push(right[rightIndex]);\n                        rightIndex++;\n                    }\n                    await getList(resultArray)\n                    handleMerge(copyright,resultArray,left,leftIndex,right,rightIndex,rightArr,true,copyleft)\n                }\n                resultArray = resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))\n                copyright.push(resultArray)\n            }\n\n            leftArr = copyleft\n            rightArr = copyright\n\n            // Assumes rightArr.length === 1 as well\n            if (leftArr.length === 1){\n                if (rightArr.length === 0){\n                    running = false\n                }\n                else {\n                    leftArr.push(rightArr[0])\n                    rightArr = []\n                }\n                \n            }\n        }\n        setRunning(false)\n        setRed(0)\n    }\n\n    return (\n        <div>\n            <div className=\"buttons\">\n                <button onClick={mergeSort}\n                        className=\"b\"\n                        disabled={running}>Click Me!</button>\n                <button onClick={() => setNewArr()}\n                        className=\"b\"\n                        disabled={running}>Randomize</button>\n            </div>\n            <div className=\"array-container\">\n                {arr.map((value,index) => (\n                    <div\n                        key={index}\n                        className=\"array\" \n                        style={{height: `${value}px`, backgroundColor: `rgb(${checkRed(value)},0,${checkBlue(value)})`}}>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n\n}\n\n\nexport default DVMergeSort","import React, {useState} from 'react'\nimport Back from '../goBack'\nimport {Link} from 'react-router-dom'\n\nimport './RadixSort.css'\nimport '../buttons.css'\n\nfunction RadixSort () {\n    const checkIndex = (index) => {\n        if (index === iteration){\n            return \"red\"\n        }\n        else if (index < iteration ){\n            return \"green\"\n        }\n        return \"black\"\n    }\n\n    const randomize = () => {\n        let newArr = []\n        for (let i = 0 ; i < 8 ; i++){\n            let newNum = Math.floor(Math.random() * 899) + 100\n            newArr.push(newNum)\n        }\n        setArr([...newArr])\n        setIteration(0)\n    }\n\n    const getNum = (num, index) => {\n        const strNum = String(num);\n        let end = strNum.length - 1;\n        const foundNum = strNum[end - index];\n\n        if (foundNum === undefined){\n            return 0;\n        }\n        return foundNum;\n    };\n\n    const RadixSort = () => {\n        if (iteration <= 2){\n            let copy = arr.slice()\n\n            let buckets = Array.from({length: 10}, () => []);\n            for (let j = 0; j < arr.length; j++){\n                let num = getNum(copy[0], iteration)\n                buckets[num].push(copy[0])\n                copy.shift()\n            }\n            let copyArr = []\n            copyArr.push.apply(copyArr, buckets.flat())\n            copyArr.push.apply(copyArr, copy)\n            setArr([...copyArr])\n\n            setIteration(iteration => iteration + 1)\n        }\n        console.log(iteration)\n        console.log(arr)\n    }\n\n    const [arr, setArr] = useState([132,412,543,865,525,967,153,648])\n    const [iteration, setIteration] = useState(0)\n\n\n    return(\n        <div>\n            <div className=\"top-bar\">\n                <Back />\n                <Link to=\"DVRadixSort\" className=\"link\">Visualize it</Link>\n            </div>\n            <div className=\"heading\">\n                <h1>RADIX SORT</h1>\n                <h5><b>WHAT IS IT?</b></h5>\n            </div>\n            <div className=\"details\">\n                <ul>\n                    <li>Algorithm that sorts based on least significant to most significant digit.</li>\n                    <li>Is a stable sort, meaning that elements in the array will appear in the order found.</li>\n                    <li>Sorts in O(n) time. Pretty fast!</li>\n                </ul>\n            </div>\n            <div className=\"buttons\">\n                <button onClick={RadixSort} disabled={iteration===3} className=\"b\">PressMe!</button>\n                <button onClick={randomize}>Randomize!</button>\n            </div>\n            <div className=\"list_render\">\n                {arr.map((value) => (\n                    <h1 className=\"RadixNode\">\n                        <div className={`list${checkIndex(2)}`}>{getNum(value,2)}</div>\n                        <div className={`list${checkIndex(1)}`}>{getNum(value,1)}</div>\n                        <div className={`list${checkIndex(0)}`}>{getNum(value,0)}</div>\n                    </h1>\n                ))}\n            </div>\n        </div>\n    )\n\n\n}\n\nexport default RadixSort","import React, {useState} from 'react'\r\n\r\nfunction DVRadixSort() {\r\n    const setNewArr = (array) => {\r\n        const newArr = []\r\n        for (let i = 0; i < array.length ; i++){\r\n            newArr.push(array[i])\r\n        }\r\n        setArr(newArr)\r\n    }\r\n\r\n    const resetArr = () => {\r\n        const newArr = []\r\n        for (let i = 0 ; i < 50 ; i++){\r\n            let newNum = Math.floor(Math.random() * 615) + 20\r\n            while (newArr.includes(newNum)){\r\n                newNum = Math.floor(Math.random() * 615) + 20\r\n            }\r\n            newArr.push(newNum)\r\n        }\r\n        return newArr\r\n    }\r\n\r\n    const [arr, setArr] = useState(resetArr)\r\n    const [running, setRunning] = useState(false)\r\n\r\n    const [red, setRed] = useState(0)\r\n    const checkRed = (val) => {\r\n        if (val === red){\r\n            return 250\r\n        }\r\n        return 65 + Math.ceil(val/8.038)\r\n    }\r\n    const checkBlue = (val) => {\r\n        if (val === red){\r\n            return 0\r\n        }\r\n        return 115 + Math.ceil(val/4.535) \r\n    }\r\n\r\n    const getNum = (num, index) => {\r\n        const strNum = String(num);\r\n        let end = strNum.length - 1;\r\n        const foundNum = strNum[end - index];\r\n\r\n        if (foundNum === undefined){\r\n            return 0;\r\n        }\r\n        return foundNum;\r\n    };\r\n\r\n    const sleep = (delay) => new Promise((resolve) => setTimeout(resolve,delay))\r\n\r\n    const radixsort = async () => {\r\n        setRunning(true)\r\n        let maxLength = 3;\r\n        let copy = arr.slice()\r\n\r\n        for (let i = 0; i < maxLength; i++) {\r\n            let buckets = Array.from({ length: 10 }, () => []);\r\n            for (let j = 0; j < arr.length; j++){\r\n                let num = getNum(copy[0], i)\r\n                buckets[num].push(copy[0])\r\n                setRed(copy[0])\r\n                copy.shift()\r\n\r\n                let copyArr = []\r\n                copyArr.push.apply(copyArr, buckets.flat())\r\n                copyArr.push.apply(copyArr, copy)\r\n                setNewArr(copyArr)\r\n                await sleep(50)\r\n            }\r\n            copy = buckets.flat()\r\n            // setArr([...copy]);\r\n        }\r\n        setRunning(false)\r\n        setRed(0)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"buttons\">\r\n                <button onClick={radixsort}\r\n                        className=\"b\"\r\n                        disabled={running}>Click Me!</button>\r\n                <button onClick={() => setNewArr(resetArr())}\r\n                        className=\"b\"\r\n                        disabled={running}>Randomize</button>\r\n            </div>\r\n            <div className=\"array-container\">\r\n                {arr.map((value,index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"array\" \r\n                        style={{height: `${value}px`, backgroundColor: `rgb(${checkRed(value)},0,${checkBlue(value)})`}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default DVRadixSort\r\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Header from './components/header'\nimport Homepage from './components/pages/HomePage/homepage'\n\nimport HashMap from './components/pages/HashMap/hashmap'\nimport HashMap2 from './components/pages/HashMap/hashmap2'\nimport HMDemo from './components/pages/HashMap/hashmapDemo'\nimport HMDemo2 from './components/pages/HashMap/HashMapDemo2'\n\nimport Stack from './components/pages/StackQueue/Stack'\n\nimport BubbleSort from './components/pages/BubbleSort/BubbleSort'\nimport DVBubbleSort from './components/pages/BubbleSort/DVBubbleSort'\n\nimport InsertionSort from './components/pages/InsertionSort/InsertionSort'\nimport DVInsertionSort from './components/pages/InsertionSort/DVInsertionSort'\n\nimport MergeSort from './components/pages/MergeSort/MergeSort'\nimport DVMergeSort from './components/pages/MergeSort/DVMergeSort'\n\nimport RadixSort from './components/pages/RadixSort/RadixSort'\nimport DVRadixSort from './components/pages/RadixSort/DVRadixSort'\n\n\nimport './index.css'\nimport './App.css'\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Header />\n                <Switch>\n                    <Route path=\"/\" exact component={Homepage} />\n\n                    <Route path=\"/BubbleSort\" exact component={BubbleSort} />\n                    <Route path=\"/DVBubbleSort\" exact component={DVBubbleSort} />\n\n                    <Route path=\"/InsertionSort\" exact component={InsertionSort} />\n                    <Route path=\"/DVInsertionSort\" exact component={DVInsertionSort} />\n\n                    <Route path=\"/MergeSort\" exact component={MergeSort} />\n                    <Route path=\"/DVMergeSort\" exact component={DVMergeSort} />\n                    \n                    <Route path=\"/RadixSort\" exact component={RadixSort} />\n                    <Route path=\"/DVRadixSort\" exact component={DVRadixSort} />\n\n                    <Route path=\"/HashMap_1\" exact component={HashMap} />\n                    <Route path=\"/HashMap_2\" exact component={HashMap2} />\n                    <Route path=\"/HashDemo\" exact component={HMDemo} />\n                    <Route path=\"/HashDemo2\" exact component={HMDemo2} />\n\n                    <Route path=\"/Stack\" exact component={Stack} />\n\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { Router, hashHistory as history } from 'react-router';\n// import routes from './Routes';\n\nReactDOM.render(\n  // <Router routes={routes} history={history} />,\n  // document.getElementById('dv-app')\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}